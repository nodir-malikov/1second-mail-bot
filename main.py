import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import API_TOKEN, EMAIL_DOMAIN
from custom_funcs import set_timer
import keyboard as kb
from onesec_api import Mailbox
import asyncio
from bs4 import BeautifulSoup

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(content_types=['text'], state='*')
async def texthandler(m: types.Message, state: FSMContext):
    if m.text != '‚úâÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç—É':
        await m.answer(
            f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {m.from_user.mention}\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n–ù–∞–∂–º–∏—Ç–µ '
            f'–Ω–∞ –∫–Ω–æ–ø—É –Ω–∏–∂–µ üëá',
            reply_markup=kb.menu)
    elif m.text == '‚úâÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç—É':
        has_mail = await state.get_data()
        try:
            if has_mail['has_mail']:
                await m.answer(f"‚úâÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ - {has_mail['email']}\n–ñ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤...")
        except Exception:
            mail = Mailbox('')
            email = f'{mail.mailbox_}@{EMAIL_DOMAIN}'
            await m.answer(
                f'üì´ –í–æ—Ç –≤–∞—à–∞ –ø–æ—á—Ç–∞: {email}\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–∏—Å—å–º–æ.\n'
                f'–ü–æ—á—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥, '
                f'–µ—Å–ª–∏ –ø—Ä–∏–¥–µ—Ç –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ, –º—ã –≤–∞—Å –æ–± —ç—Ç–æ–º –æ–ø–æ–≤–µ—Å—Ç–∏–º!\n'
                f'–ù–∞ 1 –ø–æ—á—Ç—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ - 5 –ø–∏—Å–µ–º –∑–∞ 3 '
                f'–º–∏–Ω—É—Ç—ã –≤—Ä–µ–º–µ–Ω–∏.\n\n '
                f'@mal1kov', reply_markup=ReplyKeyboardRemove())
            await state.update_data(has_mail=True)
            await state.update_data(email=email)

            last_length = 0
            now = datetime.now()
            end_time = now + timedelta(minutes=3)
            while True:
                now = datetime.now()
                timed_out = await set_timer(now, end_time)
                if last_length >= 5 or timed_out:
                    await m.answer('–õ–∏–º–∏—Ç—ã —ç—Ç–æ–π –ø–æ—á—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. ‚åõÔ∏è \n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üëç \n\n–°–∫–∞–∑–∞—Ç—å '
                                   '—Å–ø–∞—Å–∏–±–æ üëâ <a href="https://www.donationalerts.com/r/phantom_donat">–î–æ–Ω–∞—Ç</a> '
                                   '\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é '
                                   '–ø–æ—á—Ç—É üëá', reply_markup=kb.menu, parse_mode='HTML')
                    await state.finish()
                    break

                filtered_mail = mail.filtered_mail()
                if isinstance(filtered_mail, list):
                    if last_length == len(filtered_mail):
                        pass
                    else:
                        last_length = len(filtered_mail)

                        new_mail = mail.mail_jobs('read', filtered_mail[0])

                        js = new_mail.json()
                        sender = js['from']
                        theme = js['subject']
                        mes = js['body']
                        cleantext = BeautifulSoup(mes, "html.parser")
                        cleantext = "\n".join(item.strip() for item in cleantext.find_all(text=True))
                        await m.answer(
                            f'üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n'
                            f'<b>–û—Ç</b>: {sender}\n'
                            f'<b>–¢–µ–º–∞</b>: {theme}\n'
                            f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>: \n\n{cleantext}', parse_mode='HTML')

                await asyncio.sleep(5)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
